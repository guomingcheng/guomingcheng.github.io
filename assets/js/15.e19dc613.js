(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{388:function(t,a,s){"use strict";s.r(a);var i=s(46),r=Object(i.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"初识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初识"}},[t._v("#")]),t._v(" 初识")]),t._v(" "),s("h4",{attrs:{id:"git-是一个优先的分布式版本管理工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-是一个优先的分布式版本管理工具"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" git 是一个优先的分布式版本管理工具")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v(" 一个成熟的项目生命周期需要经过每个版本迭代与开发周期需要多人共同协作。如果使用人工来管理每个步骤，那必会很麻烦，而 git 出现就会让我们项目管理和多人协作变的轻松了。")])]),t._v(" "),s("blockquote",[s("p",[t._v("git 是一个开源的分布式版本控制管理系统，主要作用于团队的协作开发，并且 git 的版本管理是在本地就可以控制，而不需要联网，不像 svn 那样要连接着服务器，还有优秀的分支管理机制。优点还有如：完整性的保障、分支操作非常流畅、与 Linux 命令全面兼容")])])]),t._v(" "),s("h2",{attrs:{id:"三点概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三点概念"}},[t._v("#")]),t._v(" 三点概念")]),t._v(" "),s("h4",{attrs:{id:"git-主要工作流畅工作区、暂存区、本地库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-主要工作流畅工作区、暂存区、本地库"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" git 主要工作流畅工作区、暂存区、本地库")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("工作区")]),t._v(" "),s("blockquote",[s("p",[t._v("工作区是一个目录，也是我们在编写代码的地方. 可以使用 "),s("span",{staticClass:"hei"},[t._v(" git add ")]),t._v(" 把文件提交到暂存区，")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("暂存区")]),t._v(" "),s("blockquote",[s("p",[t._v("用于临时存储工作区提交的文件，暂未提交到本地库，可以撤回文件。可以使用 "),s("span",{staticClass:"hei"},[t._v(" git commit ")]),t._v(" 把存储的文件提交的本地库")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("本地库")]),t._v(" "),s("blockquote",[s("p",[t._v("保存每次历史提交的文件版本，可以回退到某个版本的文件")])])]),t._v(" "),s("h2",{attrs:{id:"开始"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始"}},[t._v("#")]),t._v(" 开始")]),t._v(" "),s("h4",{attrs:{id:"使用-git-命令进行实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-git-命令进行实践"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 使用 git 命令进行实践")]),t._v(" "),s("blockquote",[s("p",[t._v("先进入一个目录下，这个目录也是工作区。打开 git Bash 命令行窗口. 在这里 CatWord 目录就是我的工作区")]),t._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-02.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("初始化工作区: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[t._v("使用命令: "),s("span",{staticClass:"hei"},[t._v("git init")]),t._v(" 。当工作区的目录初始化后，才可以进行接下来的操作。当出现: Initialized empty Git repository  表示已在工作区初始化一个空的版本库。\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-03.png",alt:"An image"}})])])]),t._v(" "),s("h2",{attrs:{id:"设签名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设签名"}},[t._v("#")]),t._v(" 设签名")]),t._v(" "),s("h4",{attrs:{id:"签名是一个终端的身份证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#签名是一个终端的身份证"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 签名是一个终端的身份证")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("签名: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[t._v("协同开发，每一个开发人员向远程代码托管中心 push 时，那就无法辨别是哪个开发人员 push 的。设置签名的作用是区分每个终端 push 代码的标识，签名的格式如下:\n"),s("br"),t._v(" "),s("span",{attrs:{id:"gonglian"}},[t._v(" 用户名：")]),t._v("mingcheng\n"),s("br"),t._v(" "),s("span",{attrs:{id:"gonglian"}},[t._v(" Email 地址 : ")]),t._v(" 184761029@163.com")])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("签名级别: ")])]),t._v(" "),s("blockquote",[s("p",[t._v("项目级别: "),s("br"),t._v("仅在当前工作区本地库生效, 使用命令是: "),s("span",{staticClass:"hei"},[t._v("git config")]),s("br"),t._v(" "),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-04.png",alt:"An image"}}),t._v("\n签名设置后，git 会把签名的信息保存在当前目录下的 .git/config 文件里，打开查看设置的信息。")]),t._v(" "),s("p",[s("br"),t._v("系统级别: "),s("br"),t._v("登录当前操作系统的用户范围, 使用命令是: "),s("span",{staticClass:"hei"},[t._v("git config --global")]),t._v(" ，系统级别的多了一个 --global 参数。\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-06.png",alt:"An image"}}),t._v("\n设置系统的签名后，也有一个文件保存中，是在当前系统的用户目录下的 .gitconfig 如: C:\\Users\\Administrator\\ .gitconfig 文件")])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("签名优先级: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[t._v("就近原则，项目级别优先于系统用户级别的，二则有时采用项目级别的，没有是才采用系统用户级别的。二者都没有将不能 push 到远程代码托管仓库")])])]),t._v(" "),s("h2",{attrs:{id:"忽略文件与目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件与目录"}},[t._v("#")]),t._v(" 忽略文件与目录")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v(" 当我们使用 git 来管理项目的资源时，有些文件或目录是不需要提交到远程仓库的，所以需要使用 git 提供的机制来排除这些文件目录。")])]),t._v(" "),s("blockquote",[s("p",[t._v("在项目的目录下或者是与 .git 目录同级创建一个 .gitignore 文件，在这个文件中添加需要配置的文件与目录，使用相对路径就可以了\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-38.png",alt:"An image"}})])])]),t._v(" "),s("h2",{attrs:{id:"基本操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[t._v("#")]),t._v(" 基本操作")]),t._v(" "),s("h4",{attrs:{id:"使用-git-命令来完成一个管理文件的基本操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-git-命令来完成一个管理文件的基本操作"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 使用 git 命令来完成一个管理文件的基本操作")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("提交文件: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git status : ")]),t._v(" "),s("br"),t._v("\n查看当前分支、暂存区的状态、本地库的状态\n"),s("br"),s("br"),t._v(" "),s("span",{staticClass:"hei"},[t._v("git add [file name] : ")]),t._v(" "),s("br"),t._v("\n把新增的文件添加到暂存区中，文件的修改也是使用该命令把文件添加到暂存区中。而暂存区的文件是可以测回。\n"),s("br"),s("br"),t._v(" "),s("span",{staticClass:"hei"},[t._v('git commit -m "提交代码注释" [file name] : ')]),t._v(" "),s("br"),t._v("\n把暂存区的文件提交到本地库, 提交后一不可修改，将会作为本地库的历史版本\n"),s("br"),s("br")])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("查看提交的历史版本: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git log : ")]),t._v(" 携带参数后 "),s("span",{staticClass:"hei"},[t._v("git log --pretty=oneline ")]),t._v(" 每次的提交以一行显示"),s("br"),t._v("\n查看全部提交到本地库文件的历史版本\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-07.png",alt:"An image"}}),t._v(" "),s("br"),s("br"),t._v(" "),s("span",{staticClass:"hei"},[t._v("git reflog : ")]),t._v(" "),s("br"),t._v("\n也是查看本地库的历史版本，不过有显示指针编号，可以版本切换提供有用的参考\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-08.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("切换历史版本: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git reset --hard [hash_value] : ")]),s("br"),t._v("\n根据本地库的提交历史的哈希值来切换到对应的版本, 不分前后，只要有哈希值各种姿势都可以\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-09.png",alt:"An image"}}),t._v(" "),s("br"),s("br"),t._v(" "),s("span",{staticClass:"hei"},[t._v("git reset --hard HEAD~[value] : ")]),s("br"),t._v("\n同样式切换历史版本，不过这个只能往后面退， ~ 波浪线后跟着数值是几，就往后退几个版本\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-10.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("找回删除的文件: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[t._v("如果工作区的文件删除，以提交到本地库。当想找回时、那么可以通过版本切换来找回文件"),s("span",{attrs:{id:"gonglian"}},[t._v("[前提是被删除的文件有历史记录]")]),t._v("。因为每一次 commit 都会被\ngit 作为一个历史记录，不可磨灭的。除非删除了本地库。\n"),s("br"),s("br"),t._v("\n如果工作区的文件删除，以提交到暂存区还未 commit 到本地库。可以使用指针 "),s("span",{staticClass:"hei"},[t._v("git reset --hard HEAD")]),t._v(" 指向当前的版本，将会刷新当前版本最初的状态\n"),s("br"),s("br"),t._v("\n如果工作区的文件删除，未提交到暂存区与本地库。那么使用命令: "),s("span",{staticClass:"hei"},[t._v("git checkout -- [找回的文件名]")]),t._v(" 就可以找回删除的文件了")])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("比较文件的差异: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git diff [fileName] : ")]),s("br"),t._v("\n这个是把工作区的 fileName 文件与暂存区的 fileName 文件对比\n"),s("br"),s("br"),t._v(" "),s("span",{staticClass:"hei"},[t._v("git diff HEAD [fileName] : ")]),s("br"),t._v("\n这个是将工作区的 fileName 文件与本地库的某个历史版本的 fileName 文件对比")])])]),t._v(" "),s("h2",{attrs:{id:"分支管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),s("h4",{attrs:{id:"分支可以让多人协同并行开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支可以让多人协同并行开发"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 分支可以让多人协同并行开发")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("创建分支: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git branch -v : ")]),s("br"),t._v("\n查看所有分支, 会显示所有的分支。绿色的表示当前所在的分支\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-11.png",alt:"An image"}}),t._v(" "),s("br"),s("br"),t._v(" "),s("span",{staticClass:"hei"},[t._v("git branch [分支 name]: ")]),s("br"),t._v("\n创建分支，分支的名称是 hot_fox。把当前 master 分支的历史版本记录也会复制一份到新的 hot_fox 分支中\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-12.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("切换分支: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git checkout [分支 name]: ")]),s("br"),t._v("\n切换分支，从当前的 master 分支切换到 hot_fox 分支。在 hot_fox 的任何操作都不会影响到 master。相反同理\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-13.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("合并分支: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git merge [被合并的分支 name]: ")]),s("br"),t._v("\n合并分支，比如我想把 hot_fox 分支上的内容合并到 master 主分支上，那么就需要切换到 master 分支。执行合并的命令 "),s("span",{staticClass:"hei"},[t._v("git merge hot_fox ")]),t._v(" "),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-14.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("解决合并分支的冲突: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[t._v("当和并分支时，俩个分支的终端同时修改了相同的文件，那么合并就会产生冲突，如下面这样，冲突的出现需要手动解决\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-15.png",alt:"An image"}}),t._v("\n需要自己打开冲突的文件，把冲突的标志删除，与修改文件的终端商量如何修改。\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-16.png",alt:"An image"}}),t._v("\n修改文件后，把冲突的文件 commit 到本地库就解决冲突了。不过需要注意，commit 这次不需要加文件名参数\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-17.png",alt:"An image"}})])])]),t._v(" "),s("h2",{attrs:{id:"推送到-github"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推送到-github"}},[t._v("#")]),t._v(" 推送到 github")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("与 github 建立连接: ")]),t._v(" "),s("br"),s("br"),t._v(" "),s("span",{attrs:{id:"gonglian"}},[t._v(" github 是一个代码托管中心，他是与 git 同一个大神开发。可以去 github 注册一个账号，再创建一个仓库。这个仓库与 git 终端建立连接，把本地代码托管到 github 仓库上。 ")]),t._v(" "),s("br")])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("定义别名: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git remote add [别名变量] [仓库地址]: ")]),s("br"),t._v("\n定义别名，add 表示添加一个别名， orgin 是别名的变量， https://github.com/guomingcheng/new.git 是仓库地址\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-18.png",alt:"An image"}}),t._v(" "),s("br"),s("br"),t._v(" "),s("span",{staticClass:"hei"},[t._v("git remote -v : ")]),s("br"),t._v("\n查看别名。查看在 git 本地使用的所有别名，这个别名就相当于 java 变量，不过定义好了就不会销毁，除非删除 git 本地库\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-19.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("push 到 github: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git push [仓库远程地址] [推送的分支]: ")]),s("br"),t._v("\nroigin 是远程的仓库的地址，master 是推送的分支到 github 仓库上。推送前需要注意的有: 是否已设置签名，这是不可缺的。\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-20.png",alt:"An image"}})])])]),t._v(" "),s("h2",{attrs:{id:"团队协作开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#团队协作开发"}},[t._v("#")]),t._v(" 团队协作开发")]),t._v(" "),s("h4",{attrs:{id:"在协作开发-一个团队都有读写权限。但需要被邀请"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在协作开发-一个团队都有读写权限。但需要被邀请"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v("  在协作开发，一个团队都有读写权限。但需要被邀请")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("当团队个人把项目 clone 克隆下了，可以接着开发，但是无法 push 提交，需要创建 github 仓库的员人的邀请该开发员人加入团队，这样才可以 push 上去。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("1、邀请方打开仓库页面，点击 Settings")]),t._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-21.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("2、进入 Settings 页面后，接着点击 Collaborators")]),t._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-22.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("3、进入 Collaborators 有如下界面，添加被邀请方的用户名。 点击 add")]),t._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-23.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("4、接着是以下面的操作，复制链接发给被邀请方。")]),t._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-24.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("5、被邀请方拿到链接后接着复制，在浏览器登录自己的 github 账号上去，再往地址栏中粘贴链接，出现一下界面。被邀请方点击同意后，那么该被邀请方就加入了团队，他就可以往仓库中 push 了。")]),t._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-25.png",alt:"An image"}})])])]),t._v(" "),s("h2",{attrs:{id:"拉取-pull"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拉取-pull"}},[t._v("#")]),t._v(" 拉取 pull")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("第一种拉取方式: ")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git pull [仓库远程地址] [远程仓库分支] : ")]),s("br"),t._v("\n这种从仓库拉取下的比较简洁。\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-26.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("第二种拉取方式: ")]),s("br"),t._v("\npull 命令是他们的集合，这种是先拉取，在合并的方式")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("git fetch [仓库远程地址] [远程仓库分支] : ")]),s("br"),t._v("\n先从仓库下拉取资源\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-27.png",alt:"An image"}}),t._v(" "),s("br"),s("br"),t._v(" "),s("span",{staticClass:"hei"},[t._v("git merge [仓库远程地址/远程仓库分支] : ")]),s("br"),t._v("\n合并从仓库拉取下来的资源分支， fetch + merge = pull\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-28.png",alt:"An image"}})])])]),t._v(" "),s("h2",{attrs:{id:"免密-push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#免密-push"}},[t._v("#")]),t._v(" 免密 push")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("使用 SSH 的方式 pust : ")]),t._v(" "),s("br"),s("br"),t._v("\n在前面的示列每次 push 到远程仓库时，都是使用的 http 请求的模式，这模式每次 push 都需要输入用户名与密码，这也很不方便。\n所以这次使用 ssh 加密连接远程仓库，push 就不用输入用户名与密码，但是只能配置对一个 github 用户。")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticClass:"hei"},[t._v("ssh-keygen -t rsa -C ['github 用户的邮箱'] : ")]),s("br"),t._v("\n一路 Enter 就行了，在电脑用户目录下会生成一个 .shh 目录，.ssh 目录下有个 id_rsa.pub 文件，复制文件的内容，接着下一步\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-29.png",alt:"An image"}}),t._v(" "),s("br"),s("br"),t._v("\n进入 github 个人中心。进入 Settings/SSH and GPG keys ，会有下面的界面，点击 New SHH key 标题随便添加，把复制的内容填在下个框再确定就可以了。本地与 github 以建立了远程连接\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-30.png",alt:"An image"}}),t._v(" "),s("br"),s("br"),t._v("\n注意: 现在 push 远程仓库的路径以不是 http, 而是下面这种形式。\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-31.png",alt:"An image"}})])])]),t._v(" "),s("h2",{attrs:{id:"gitlab-环境搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-环境搭建"}},[t._v("#")]),t._v(" GitLab 环境搭建")]),t._v(" "),s("h4",{attrs:{id:"_1、下载-gitlab-的安装包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、下载-gitlab-的安装包"}},[t._v("#")]),t._v(" 1、下载 gitlab 的安装包")]),t._v(" "),s("blockquote",[s("p",[t._v("不在 linux 上下载 gitlab 安装包，是安装包太大了。以防网络不顺畅而掉线，所我们现在 win 上下载，在把安装包上传到 linux 。下面链接就是下载 gitlab 安装包的："),s("br"),s("br"),t._v(" "),s("span",{attrs:{id:"gonglian"}},[t._v("https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-10.8.2-ce.0.el7.x86_64.rpm")]),t._v(" "),s("br")]),t._v(" "),s("blockquote",[s("p",[t._v("打开链接后, 会出现包含以下的页面，直接点击下载即可。\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-32.png",alt:"An image"}})])])]),t._v(" "),s("h4",{attrs:{id:"_2、上传-gitlab-的安装包到-linux-上"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、上传-gitlab-的安装包到-linux-上"}},[t._v("#")]),t._v(" 2、上传 gitlab 的安装包到 linux 上")]),t._v(" "),s("blockquote",[s("p",[t._v("把安装包上传到 /opt/ 目录下")]),t._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-33.png",alt:"An image"}})])])]),t._v(" "),s("h4",{attrs:{id:"_3、在-opt-目录下创建一个-install-sh-可执行文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、在-opt-目录下创建一个-install-sh-可执行文件"}},[t._v("#")]),t._v(" 3、在 /opt 目录下创建一个 install.sh 可执行文件")]),t._v(" "),s("blockquote",[s("p",[t._v("在 install.sh 文件中添加以下内容, 保存退出:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("\nsudo yum install "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("y curl policycoreutils"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("python openssh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("server cronie\nsudo rpm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ivh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("opt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gitlab"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ce"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.8")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ce"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),t._v("el7"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x86_64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rpm\nsudo yum install lokkit\nsudo lokkit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s http "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s ssh\nsudo yum install postfix\nsudo service postfix start\nsudo chkconfig postfix on\ncurl https"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("packages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitlab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("install"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("repositories"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gitlab"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gitlab"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ce"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rpm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sudo bash\nsudo "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EXTERNAL_URL")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://gitlab.example.com"')]),t._v(" yum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("y install gitlab"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ce\n\n")])])]),s("blockquote",[s("p",[t._v("退出后，把 install.sh 文件设置成可执行文件，命令如: "),s("span",{attrs:{id:"gonglian"}},[t._v(" chmod 775 install.sh ")]),t._v(" "),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-35.png",alt:"An image"}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("执行 install.sh 可执行文件：")]),t._v(" "),s("blockquote",[s("p",[t._v("执行 "),s("span",{attrs:{id:"gonglian"}},[t._v(" ./insatll.sh ")]),t._v("可执行文件，如出现下面的图标，表示安装顺利了。但要把电脑重启一下\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-36.png",alt:"An image"}})])])]),t._v(" "),s("h4",{attrs:{id:"_4、初始化配置文件。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、初始化配置文件。"}},[t._v("#")]),t._v(" 4、初始化配置文件。")]),t._v(" "),s("blockquote",[s("p",[t._v("使用命令："),s("span",{attrs:{id:"gonglian"}},[t._v("gitlab-ctl reconfigure")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果初始化配置后末尾出现一下内容，那么就成功了。否则就是 install 有问题\n"),s("img",{attrs:{src:"/img/java/%E5%B7%A5%E5%85%B7/git/git-37.png",alt:"An image"}})])])]),t._v(" "),s("h4",{attrs:{id:"_5、防火墙、启动-gitlab、访问-gitlab-网站"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、防火墙、启动-gitlab、访问-gitlab-网站"}},[t._v("#")]),t._v(" 5、防火墙、启动 gitlab、访问 gitlab 网站")]),t._v(" "),s("blockquote",[s("p",[t._v("1、关闭掉防火墙:")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("service fiewalld stop")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("2、启动 gitlab:")]),t._v(" "),s("blockquote",[s("p",[s("span",{attrs:{id:"gonglian"}},[t._v("gitlab-ctl start")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("3、访问 ip 就可以了。默认 80 端口")])])])}),[],!1,null,null,null);a.default=r.exports}}]);