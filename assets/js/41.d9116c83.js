(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{410:function(t,s,a){"use strict";a.r(s);var n=a(46),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[t._v("#")]),t._v(" 准备工作")]),t._v(" "),a("h4",{attrs:{id:"准备-typescript-环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备-typescript-环境"}},[t._v("#")]),t._v(" 准备 TypeScript 环境:")]),t._v(" "),a("h4",{attrs:{id:"安装命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装命令"}},[t._v("#")]),t._v(" 安装命令：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是安装 typescript 集成环境")]),t._v("\nnpm install "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("g typescript\n")])])]),a("h4",{attrs:{id:"主要命令说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要命令说明"}},[t._v("#")]),t._v("   主要命令说明：")]),t._v(" "),a("h5",{attrs:{id:"_1、tsc-init-初始化-ts-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、tsc-init-初始化-ts-配置文件"}},[t._v("#")]),t._v("     1、tsc --init    初始化 Ts 配置文件")]),t._v(" "),a("h5",{attrs:{id:"_2、tsc-watch-实时编译成-js-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、tsc-watch-实时编译成-js-文件"}},[t._v("#")]),t._v("     2、tsc --watch    实时编译成 js 文件")]),t._v(" "),a("h2",{attrs:{id:"基元类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基元类型"}},[t._v("#")]),t._v(" 基元类型")]),t._v(" "),a("h5",{attrs:{id:"基元类型是-ts-提供了静态编程语言中的类型识别-和-java-基本类型一样-也是拥有着-string-字符串、number-整数、number-数组、-对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基元类型是-ts-提供了静态编程语言中的类型识别-和-java-基本类型一样-也是拥有着-string-字符串、number-整数、number-数组、-对象类型"}},[t._v("#")]),t._v(" 基元类型是 Ts 提供了静态编程语言中的类型识别，和 java 基本类型一样，也是拥有着 string 字符串、number 整数、number[] 数组、 {} 对象类型")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这意思是声明一个 string 类型的 name 变量, 在 ts 中对这种声明称为《类型注释》")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"guomingcheng"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里同理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是声明一个 number 类型的数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是声明一个对象的类型，也是 json 对象，这里不需要类型注释，    ")]),t._v("\n    x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象内部的变量可以不声明类型注释，ts 会根据赋给的值自动的推断出来")]),t._v("\n    y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们在函数中的参数也要明确一个参数的类型，这里就明确了 proo 是一个 string, 调用 greet 函数不能随便的传参了，必")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 须传入的是 string 类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("proo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数的尾部 : 冒号的类型，表示的是函数的返回类型，如果不明确返回的")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型， ts 就会自动的推断出函数返回的类型")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `` 反引号是 ES6 的语法，称为模板字符串，在 `` 包围内可以使用 ${} 方式引入其他变量，`` 自动的字符串拼接")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我认为他的优势就是可以随意的位置字符串拼接")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("proo ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("proo"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数的调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"adsa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[t._v("#")]),t._v(" 联合类型")]),t._v(" "),a("h5",{attrs:{id:"联合类型是一个类型或者多个类型的组合被称为联合类型-多个类型之间使用-符号分隔-表示一个参数可以接受-number-类的字面量或者接受-string-字面量但是-要使用联合类型时-要坐进一步的处理-因为-ts-是一个严格的编译检查-他是无法知道你是-number-还是-string-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合类型是一个类型或者多个类型的组合被称为联合类型-多个类型之间使用-符号分隔-表示一个参数可以接受-number-类的字面量或者接受-string-字面量但是-要使用联合类型时-要坐进一步的处理-因为-ts-是一个严格的编译检查-他是无法知道你是-number-还是-string-类型"}},[t._v("#")]),t._v(" 联合类型是一个类型或者多个类型的组合被称为联合类型， 多个类型之间使用 | 符号分隔，表示一个参数可以接受 number 类的字面量或者接受 string 字面量"),a("br"),t._v("但是：要使用联合类型时，要坐进一步的处理，因为 ts 是一个严格的编译检查，他是无法知道你是 number 还是    string 类型")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这就是联合类型的使用方式，vue 参数是一个 string 类型，也可以是一个 number 类型")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" vue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xixi"')]),t._v("\n\n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// last?：string , 这里加了个 ? 问号，表示这个参数是可选的，可以选择传入或者选择不传入")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 TS 这个写法就有点相当于 java 的方法重载，相同函数名称与不同的参数个数，但是在函数内使用的 last 需要坐进一步的处理")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pintName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("fist"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" last"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意，这种可传参的参数，不能 obj.last 使用，因为在 ts 检查时，last 不一定时 string 类型的，也可能是 unf 的")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有使用需要 obj.last? ,加一个 ? 问号，这表示 last 有参数的话，就输出，否则就不输出")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//console.log(obj.last.charAt(1));")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 另一种的使用方式，if 判断")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("last "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined 是一个类型，不是字符串，这个需要注意")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里参数传入的对象就只有一个类型，就可以")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pintName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("fist"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"guomingcheng"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//联合类型的参数，这里的意思就是表示，id 可以是一个 string 类型，也可以是一个整数类型")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("prindId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof Id, 这个关键字意思就是获取 Id 参数的类型，在与 'string' 字符串比较，就达到缩小类型")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof 关键字是用于判断参数是某个类型，注意的是，类型需要是字符串")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个判断用于缩小 id 类型的氛围为 string, 这样 id 调用 string　函数就没有问题了")]),t._v("\n           console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个就表示可以接受 string 数组或者 string 类型")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("welcomePeople")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个 Array 工具类来判断一个参数是否是数组类型")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[t._v("#")]),t._v(" 类型别名")]),t._v(" "),a("h5",{attrs:{id:"定义类型的别名-就是给基元类型、联合类型、对象等-去一个别名-这个别名与所赋值的类型是一个等价的-一般用于有些长度的类型取一个短的别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义类型的别名-就是给基元类型、联合类型、对象等-去一个别名-这个别名与所赋值的类型是一个等价的-一般用于有些长度的类型取一个短的别名"}},[t._v("#")]),t._v(" 定义类型的别名，就是给基元类型、联合类型、对象等，去一个别名，这个别名与所赋值的类型是一个等价的，一般用于有些长度的类型取一个短的别名")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个就为联合类型定义了一个别名，可以使用 Point， 因为 Point 具备了 number|string 联合类型的状态")]),t._v("\ntype Point "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("string\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个就是为对象类型定义一个别名，与上面相同，也是可以定义其他的类型的别名")]),t._v("\ntype Obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"接口类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口类型"}},[t._v("#")]),t._v(" 接口类型")]),t._v(" "),a("h5",{attrs:{id:"接口类型与-type-定义的别名功能差不多-只不过接口类型是可以通过-extends-继承其他的接口类型-获取父接口内的定义的变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口类型与-type-定义的别名功能差不多-只不过接口类型是可以通过-extends-继承其他的接口类型-获取父接口内的定义的变量"}},[t._v("#")]),t._v(" 接口类型与 type 定义的别名功能差不多，只不过接口类型是可以通过 extends 继承其他的接口类型，获取父接口内的定义的变量")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ts 的接口定义好像不用函数，只是仅仅的定义字段 ，感觉和声明一个对象差不多")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Points")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为接口本来也是一种类型，所以在这里就使用接口 Points 类型作为参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pringCoords")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("pt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Points")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pringCoords")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的 Bear 类型就继承了 Points 内的 x: number 与 y:number 类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bear")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Points")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    z"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[t._v("#")]),t._v(" 类型断言")]),t._v(" "),a("h2",{attrs:{id:"类型守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型守卫"}},[t._v("#")]),t._v(" 类型守卫")])])}),[],!1,null,null,null);s.default=r.exports}}]);