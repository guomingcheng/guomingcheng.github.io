(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{409:function(t,a,s){"use strict";s.r(a);var e=s(46),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"标识符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[t._v("#")]),t._v(" 标识符")]),t._v(" "),s("h4",{attrs:{id:"标识符就是名称"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符就是名称"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 标识符就是名称")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticStyle:{"font-size":"13px"},attrs:{id:"gonglian"}},[t._v(" 计算机中可以为 变量、常量、函数、成员变量、类、接口和扩展设置名字，名称就是标识符，标识符就是名称。但是，标识符的设置是有规则的，也是计算机的命名规范。")])])]),t._v(" "),s("h2",{attrs:{id:"变量声明规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明规范"}},[t._v("#")]),t._v(" 变量声明规范")]),t._v(" "),s("h4",{attrs:{id:"kotlin-中的变量声明规范是我们踏进开发程序的第一步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-中的变量声明规范是我们踏进开发程序的第一步"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" kotlin 中的变量声明规范是我们踏进开发程序的第一步")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticStyle:{"font-size":"13px"},attrs:{id:"gonglian"}},[t._v("kotlin 语言的变量声明和 java 差不多一致的，区别有俩点； 1. 在于 java 中是可以 $ 符合来命名，但是 kotlin 语言中就不行。 2. kotlin 中是可以使用中文来做标识符")])]),t._v(" "),s("p",[s("span",{staticStyle:{"font-size":"13px"}},[s("br"),t._v(" 下面是声明的条规： ")])]),t._v(" "),s("blockquote",[s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("规则")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("规则说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("区分大小写")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Main 与 main 字母大小写不同，是区分为俩个标识符了")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("首字符")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("标识符的首字符只能是字母或者是下划线，不能是数字。数字除了首字符都是可以做为标识符的")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("关键字")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("在 kotlin 中关键字是分为三种的，分别是硬关键字、软关键字、修饰符关键字")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("硬关键字")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("是不作为标识符的，其余俩个在他适用场景之外可以作为标识符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("特定关键字")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("field 与 it 不能作标识符，他俩是系统提供隐藏的变量, 作用与特殊的环境")])])])])]),t._v(" "),s("h4",{attrs:{id:"实列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实列"}},[t._v("#")]),t._v(" 实列：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" fun "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("args"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n   val "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如何需使用硬关键字，那么要使用反引号引起来")]),t._v("\n   val "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("房子")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unicode 编码，是可以用作于标识符的")]),t._v("\n   val "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"可以使用"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//软关键字在他的使用范围")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"世界，e你好"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("h2",{attrs:{id:"关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[t._v("#")]),t._v(" 关键字")]),t._v(" "),s("h4",{attrs:{id:"在-kotlin-中的关键字可以高达七十多个"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-kotlin-中的关键字可以高达七十多个"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 在 kotlin 中的关键字可以高达七十多个")]),t._v(" "),s("blockquote",[s("h4",{attrs:{id:"硬关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#硬关键字"}},[t._v("#")]),t._v(" 硬关键字")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("强制类型转换"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("安全类型转换"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" 、"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" 、"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" 、"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" 、\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 、 fun 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("判断一个集合有没有这个元素"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("取反"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" 、 is"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("判断一个对象是否是属于某个类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 、\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("is"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("取反"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" 、 object 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" 、 teypllas 、\n\nval、"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" 、 when 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v("\n")])])])]),t._v(" "),s("h4",{attrs:{id:"软关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#软关键字"}},[t._v("#")]),t._v(" 软关键字")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("by 、 catch 、 constructor 、 delegate 、 dynamic 、 field 、 file 、 finally 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" 、 impot 、\n\ninit 、 param 、 property 、 receiver 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" 、 setparam 、 where\n")])])])]),t._v(" "),s("h4",{attrs:{id:"修饰符关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符关键字"}},[t._v("#")]),t._v(" 修饰符关键字")]),t._v(" "),s("blockquote",[s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("abstract 、 annotation 、 companion 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" 、 crossinline 、 data 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" 、 external 、 final 、\n\nlnfix 、 inner 、 internal 、 leteinit 、 noinline 、 open 、 openator 、 out 、 override 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" 、\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" 、 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" 、 reified 、 sealed 、 suspend 、 tailrec 、 vararg\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"变量与常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量与常量"}},[t._v("#")]),t._v(" 变量与常量")]),t._v(" "),s("h4",{attrs:{id:"变量-一个标识符变量指向一个值或者一个对象-可以被改变-都统称为变量。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量-一个标识符变量指向一个值或者一个对象-可以被改变-都统称为变量。"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 变量: 一个标识符变量指向一个值或者一个对象，可以被改变，都统称为变量。")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticStyle:{"font-size":"13px"},attrs:{id:"gonglian"}},[t._v("在 kotlin 中声明变量是使用 var 关键字， 是不需指定数据类型。 var 在编会自动导出变量的类型的")])]),t._v(" "),s("blockquote",[s("p",[t._v("使用 var 声明的变量，当指向的是基础类型，那它的值是可以被改变的。如是指向的是一个对象类型，那这个变量是可以改变指向这个对象类型的另一个实列")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//自动推导")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Long "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("L"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//明确指定类型")]),t._v("\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"常量-一个标识符变量指向一个值或者一个对象-不可以被改变-统称为常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量-一个标识符变量指向一个值或者一个对象-不可以被改变-统称为常量"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 常量: 一个标识符变量指向一个值或者一个对象，不可以被改变，统称为常量")]),t._v(" "),s("blockquote",[s("p",[s("span",{staticStyle:{"font-size":"13px"},attrs:{id:"gonglian"}},[t._v(" 在 kotlin 中声明常量中分别有 val（运行期常量） 与 const val（编译期常量） ")])]),t._v(" "),s("h4",{attrs:{id:"conts-val"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conts-val"}},[t._v("#")]),t._v(" conts val")]),t._v(" "),s("blockquote",[s("p",[t._v("const val 声明编译期常量，常量在编译时就确定下来、不可改。conts val 只能用在于顶层常量声明，或声明对象中常量的成员变量，而且类型只能时基础类型与 String")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" val Number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),s("blockquote",[s("h4",{attrs:{id:"val"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#val"}},[t._v("#")]),t._v(" val")]),t._v(" "),s("blockquote",[s("p",[t._v("val 声明的运行期的变量，当前指向的是基础类型，那它的值是可以被改变的。 如是指向的是一个对象的类型，那这个变量是不可以改变指向这个对象类型的另一个实列的，但可以改变指向这个对象类型的成员变量")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("val Number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"语句和表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句和表达式"}},[t._v("#")]),t._v(" 语句和表达式")]),t._v(" "),s("h4",{attrs:{id:"俩者之间在-kotlin-中是不同的概念-需要分清楚"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#俩者之间在-kotlin-中是不同的概念-需要分清楚"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 俩者之间在 kotlin 中是不同的概念，需要分清楚")]),t._v(" "),s("blockquote",[s("h4",{attrs:{id:"语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[t._v("#")]),t._v(" 语句")]),t._v(" "),s("p",[s("span",{staticStyle:{"font-size":"13px"},attrs:{id:"gonglian"}},[t._v("  什么是语句呢？ 就是一段代码是没有返回值的，都统称为语句 ")])]),t._v(" "),s("blockquote",[s("p",[t._v("如：使用 for while do-while 这些是没有返回值的，可以称为语句的，因为这些代码快执行完后，是没有值反回的。")])])]),t._v(" "),s("blockquote",[s("h4",{attrs:{id:"表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式"}},[t._v("#")]),t._v(" 表达式")]),t._v(" "),s("p",[s("span",{staticStyle:{"font-size":"13px"},attrs:{id:"gonglian"}},[t._v("  什么是表达式呢？ 就是一段代码是有返回值的，都统称为表达式 ")])]),t._v(" "),s("blockquote",[s("p",[t._v("如: 1+1 、 if 、 when(如何 java 中的分支跳转语句) 、 控制表达式 、 try 表达式 、 表达式函数体 、 对象表达式")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("val result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小于"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"不小于"')]),t._v("； "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//kotlin 中 if 可以有这样的写法")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[t._v("#")]),t._v(" 包")]),t._v(" "),s("h4",{attrs:{id:"包的作用就是提供一个命名空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包的作用就是提供一个命名空间"}},[t._v("#")]),t._v(" "),s("div",{staticClass:"biaoti2"}),t._v(" 包的作用就是提供一个命名空间")])])}),[],!1,null,null,null);a.default=r.exports}}]);